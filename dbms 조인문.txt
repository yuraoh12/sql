JOIN은 데이터베이스 내의 여러 테이블에서 가져온 레코드를 조합하여 하나의 테이블로 표현해 줌
JOIN은 보통 SELECT 문과 함께 자주 사용됨
표준 SQL에서는 레코드를 조합하는 방식에 따라 JOIN을 다음과 같이 구분함
INNER JOIN
LEFT JOIN
RIGHT JOIN
OUTER JOIN
INNER JOIN
MySQL에서는 JOIN, INNER JOIN이 같은 의미로 사용됨
INNER JOIN은 ON절과 함께 사용되며, ON절의 조건을 만족하는 데이터만을 가져옴
SELECT * FROM 첫번째 테이블 이름 INNER JOIN 두번째 테이블 이름 ON 조건
SELECT * FROM 첫번째 테이블 이름 JOIN 두번째 테이블 이름 ON 조건
MySQL은 표준 SQL 방식과 다르게 MySQL에서만 사용할 수 있는 방식이 하나 더 있음
SELECT * FROM 첫번째 테이블 이름, 두번째 테이블 이름 WHERE 첫번째 테이블 이름.컬럼 = 두번째 테이블 이름.컬럼
이 방식은 위의 INNER JOIN과 같은 결과가 나옴
LEFT JOIN
LEFT JOIN은 첫번째 테이블을 기준으로 두번째 테이블을 조합하는 방식
SELECT * FROM 첫번째 테이블 이름 LEFT JOIN 두번째 테이블 이름 ON 조건
ON절의 조건을 만족하지 않는 경우에는 첫번째 테이블의 필드 값은 그대로 가져옴
해당 레코드의 두번째 테이블의 필드 값은 모두 NULL로 표시됨
RIGHT JOIN
RIGHT JOIN은 LEFT JOIN과 반대로 두번째 테이블을 기준으로 첫번째 테이블을 조합하는 방식
SELECT * FROM 두번째 테이블 이름 LEFT JOIN 첫번째 테이블 이름 ON 조건
ON절의 조건을 만족하지 않는 경우에는 두번째 테이블의 필드 값은 그대로 가져옴
해당 레코드의 첫번째 테이블의 필드 값은 모두 NULL로 표시됨
OUTER JOIN
INNER JOIN과 다르게 OUTER JOIN은 한쪽 테이블에만 내용이 있어도 결과가 검색됨
기준 테이블 내용의 누락 없이 검색하면서도, 대상 테이블의 내용을 가져올 수 있음
LEFT OUTER JOIN, RIGHT OUTER JOIN
SELECT * FROM 첫번째 테이블 이름 LEFT OUTER JOIN 두번째 테이블 이름 ON 조건
SELECT * FROM 첫번째 테이블 이름 RIGHT OUTER JOIN 두번째 테이블 이름 ON 조건


내장함수
문자열 함수
문자열 길이
LENGTH() : 전달받은 문자열의 길이를 반환
SELECT LENGTH('12345678'); -> 8
문자열 결합
CONCAT() : 전달받은 문자열을 모두 결합하여 하나의 문자열로 반환
전달받은 문자열 중 하나라도 NULL이 존재하면 NULL을 반환
SELECT CONCAT('CON', 'CAT Ex', 'ample'), CONCAT('CONCAT', NULL, ' Example'); -> CONCAT Example, NULL
특정 문자열의 위치 검색
LOCATE() : 전달받은 문자열이 특정 문자열에서 처음으로 나타나는 위치를 찾고 해당 위치를 반환
전달받은 문자열이 특정 문자열 내에 존재하지 않으면 0을 반환
세번째 인수로 특정 문자열에서 전달받은 문자열을 찾기 시작할 인덱스를 지정할 수 있음
SELECT LOCATE('abc', 'ababcDEFabc'), LOCATE('qwer', 'ababcDEFabc'), LOCATE('abc', 'ababcDEFabc', 4); -> 3, 0, 9
문자열 추출
LEFT() : 전달받은 문자열의 왼쪽부터 명시한 개수만큼의 문자를 반환
RIGHT() : 전달받은 문자열의 오른쪽부터 명시한 개수만큼의 문자를 반환
SELECT LEFT('MySQL LEFT() Exam', 5), RIGHT('MySQL RIGHT() Exam', 12); -> MySQL, RIGHT() Exam
문자열 대체
REPLACE() : 전달받은 문자열에서 특정 문자열을 찾은 후에 찾은 문자열을 대체 문자열로 교체
SELECT REPLACE('MySQL', 'My', 'MS '); -> MS SQL
문자열 다듬기
TRIM() : 전달받은 문자열의 앞이나 뒤, 또는 양쪽 모두에 있는 특정 문자를 제거
TRIM()에서 사용할 수 있는 지정자
BOTH : 전달받은 문자열의 양 끝에 존재하는 특정 문자를 제거
LEADING : 전달받은 문자열 앞에 존재하는 특정 문자를 제거
TRAILING : 전달받은 문자열 뒤에 존재하는 특정 문자를 제거
SELECT TRIM(' !!MySQL TRIM() Exam!! '), TRIM(LEADING '!' FROM ' !!MySQL TRIM() Exam!! '), TRIM(TRAILING '!' FROM ' !!MySQL TRIM() Exam!! '); -> !!MySQL TRIM() Exam!!, MySQL TRIM() Exam!!, !!MySQL TRIM() Exam
숫자로 이루어진 문자열의 형식화
FORMAT() : 숫자 타입의 데이터를 세자리마다 쉼표(,)를 사용하는 형식으로 변환
반환되는 데이터가 숫자 타입이 아닌 문자열 타입이므로 주의해야함
두번째 인수로 반올림할 소수 부분의 자릿수까지 지정가능
SELECT FORMAT(123456789.123456, 5); -> 123,456,789.12346
수학 함수
올림, 내림, 반올림
CEIL() : 전달받은 값과 같거나 큰 수 중에서 가장 작은 정수를 반환
FLOOR() : 전달받은 값과 같거나 작은 수 중에서 가장 큰 정수를 반환
ROUND() :
전달받은 값을 소수점 이하 자릿수를 남기고 반올림
두번째 인수로 반올림할 소수점을 지정할 수 있음
자릿수를 생략하면 소숫점이 5이상일 때 반올림
자릿수를 0으로 지정하면 소숫점에서 반올림
자릿수를 양수로 지정하면 해당하는 자릿수에서 반올림
SELECT CEIL(10.95), CEIL(11.01), CEIL(11), CEIL(-10.95), CEIL(-11.01); -> 11, 12, 11, -10, -11
SELECT FLOOR(10.95), FLOOR(11.01), FLOOR(-10.95), FLOOR(-11.01); -> 10, 11, -11, -12
SELECT ROUND(10.49), ROUND(10.5), ROUND(10.356, 2), ROUND(10.567, 0), ROUND(-10.5), ROUND(-10.49); -> 10, 11, 10.36, 11, -11, -10
기타함수
ABX() : 전달받은 수의 절댓값을 반환
RAND() : 0.0보다 크거나 같고 1.0보다 작은 하나의 실수를 무작위로 생성하여 반환
SELECT ABS(-3), RAND(); -> 3, 랜덤값
